from Utils import *

ham_path = ['Data/enron1/ham','Data/enron2/ham','Data/enron3/ham','Data/enron4/ham','Data/enron5/ham']
spam_path = ['Data/enron1/spam','Data/enron2/spam','Data/enron3/spam','Data/enron4/spam','Data/enron5/spam']

test_ham = 'Data/enron6/ham'
test_spam = 'Data/enron6/spam'

ham_mails = ''
for path in ham_path:
    ham_mails += get_mails(path)

ham_content = word_dict(ham_mails)
ham_normalized = normalize_values(ham_content)


spam_mails = ''
for path in spam_path:
    spam_mails += get_mails(path)

spam_content = word_dict(spam_mails)
spam_normalized = normalize_values(spam_content)


misclassified = 0
correct = 0

no_testspam = no_mails(test_spam)
no_testham = no_mails(test_ham)

t = 0
for filename in glob.glob(os.path.join(test_spam, '*.txt')):
    t += 1
    f = open(filename, 'r')
    content = f.read().replace('\n', '')
    score = compute_score(ham_normalized, spam_normalized, content)
    if score > 0.5:
        misclassified += 1.0
    else:
        correct += 1.0
    print(correct, correct+misclassified, "/", no_testspam)
    if t > 10:
        break

accuracy = float(correct / (misclassified + correct))
print(accuracy)

misclassified = 0
correct = 0

t = 0
for filename in glob.glob(os.path.join(test_ham, '*.txt')):
    t += 1
    f = open(filename, 'r')
    content = f.read().replace('\n', '')
    score = compute_score(ham_normalized, spam_normalized, content)
    if score < 0.5:
        misclassified += 1.0
    else:
        correct += 1.0
    print(correct, correct+misclassified, "/", no_testham)
    if t > 10:
        break

accuracy = float(correct / (misclassified + correct))
print(accuracy)


#print(compute_probability(ham_normalized,spam_normalized,mail, prior = 0.5))
#print(compute_score(ham_normalized,spam_normalized,mail, prior = 0.5))








