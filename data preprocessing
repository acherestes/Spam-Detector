import os
import io
import glob
import numpy as np

path_ham = 'Data/enron1/ham'
path_spam = 'Data/enron1/spam'

ham_count = dict()
spam_count = dict()

#Create ham dict
for filename in glob.glob(os.path.join(path_ham, '*.txt')):
    f = open(filename, 'r')
    content = f.read().replace('\n', '')
    for word in content.split():
        word = word.lower()
        if word not in ham_count:
            ham_count[word] = 1
        else:
            ham_count[word] += 1

#print(ham_count)

#Create spam dict
for filename in glob.glob(os.path.join(path_spam, '*.txt')):
    f = open(filename, 'r')
    try:
        content = f.read().replace('\n', '')
        for word in content.split():
            word = word.lower()
            if word not in spam_count:
                spam_count[word] = 1
            else:
                spam_count[word] += 1
    except:
        pass
#print(spam_count)

#Count total ham size
total_ham = 0
max_ham = 0
min_ham = float('inf')
for key in ham_count:
    if ham_count[key] > max_ham:
        max_ham = ham_count[key]
    if ham_count[key] < min_ham:
        min_ham = ham_count[key]
    total_ham += ham_count[key]
print(total_ham, max_ham, min_ham)

#Count total spam size
total_spam = 0
max_spam = 0
min_spam = float('inf')
for key in spam_count:
    if spam_count[key] > max_spam:
        max_spam = spam_count[key]
    if spam_count[key] < min_spam:
        min_spam = spam_count[key]
    total_spam += spam_count[key]
print(total_spam, max_spam, min_spam)

#Normalize ham
max_ham = -1.0
min_ham = 2.0
norm_ham = dict()
total_norm = 0.0
#print(ham_count)
for key in ham_count:
    norm_ham[key] = float(ham_count[key] / total_ham)
    if norm_ham[key] > max_ham:
        max_ham = norm_ham[key]
    if norm_ham[key] < min_ham:
        min_ham = norm_ham[key]
    total_norm += norm_ham[key]
#print(norm_ham)
print(total_norm, max_ham, min_ham)

for key in ham_count:
    ham_count[key] = np.log(ham_count[key])

#Normalize spam
max_spam = -1.0
min_spam = 2.0
norm_spam = dict()
total_norm = 0.0
#print(ham_count)
for key in spam_count:
    norm_spam[key] = float(spam_count[key] / total_spam)
    if norm_spam[key] > max_spam:
        max_spam = norm_spam[key]
    if norm_spam[key] < min_spam:
        min_spam = norm_spam[key]
    total_norm += norm_spam[key]
#print(norm_spam)
print(total_norm, max_spam, min_spam)

for key in spam_count:
    spam_count[key] = np.log(spam_count[key])

test_ham = 'Data/enron2/ham'
test_spam = 'Data/enron2/spam'

misclassified = 0
correct = 0
t = 0
for filename in glob.glob(os.path.join(test_ham, '*.txt')):
    t += 1
    f = io.open(filename, mode="r", encoding="cp1252")
    content = f.read().replace('\n', '')
    ham_score = 0
    spam_score = 0
    for word in content.split():
        word = word.lower()
        if word in ham_count.keys():
            ham_score += ham_count[word]
        if word in spam_count.keys():
            spam_score += spam_count[word]
    if ham_score < spam_score:
        misclassified += 1
    else:
        correct += 1
    #print(t, correct, misclassified, ham_score, spam_score)
    #if t > 200:
     #   break

accuracy = correct / (misclassified + correct)
print(accuracy)


misclassified = 0
correct = 0
t = 0
for filename in glob.glob(os.path.join(test_spam, '*.txt')):
    t += 1
    f = io.open(filename, mode="r", encoding="cp1252")
    content = f.read()
    ham_score = 0
    spam_score = 0
    for word in content.split():
        word = word.lower()
        if word in ham_count.keys():
            ham_score += ham_count[word]
        if word in spam_count.keys():
            spam_score += spam_count[word]
    if ham_score < spam_score:
        misclassified += 1
    else:
        correct += 1
    #print(t, correct, misclassified, ham_score, spam_score)
    #if t > 200:
        #break

accuracy = correct / (misclassified + correct)
print(accuracy)
